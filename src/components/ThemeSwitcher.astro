---
import { tw } from '@nrsk/tw'

import { Theme } from '@/config'

import ThemeIconLight from './ThemeIconLight.astro'
import ThemeIconDark from './ThemeIconDark.astro'

function iconClasses(isHidden = false) {
  return tw`
    ${isHidden && 'hidden'} w-6 cursor-pointer
    text-gray-900 dark:text-gray-50 transition-colors
    group-hover:text-crayola-500 dark:group-hover:text-crayola-300
  `
}
---

<button
  id="js-button"
  type="button"
  aria-label="auto"
  aria-live="polite"
  class:list={[
    "group flex items-center justify-center",
    "w-auto h-auto rounded-lg transition-colors"
  ]}
>
  <ThemeIconDark
    id="js-dark-icon"
    class={iconClasses(true)}
  />

  <ThemeIconLight
    id="js-light-icon"
    class={iconClasses(true)}
  />
</button>

<script is:inline define:vars={Theme}>
// Text node for disabling transitions.
const noTransitionsNode = document.createTextNode(`* { transition: none !important }`)

// Elements.
const rootEl = document.documentElement
const metaThemeEl = document.querySelector('meta[name="theme-color"]')

const buttonEl = document.getElementById('js-button')
const darkIconEl = document.getElementById('js-dark-icon')
const lightIconEl = document.getElementById('js-light-icon')

// State from the `document.documentElement`.
let schemeState = hasClass(rootEl, classDark)

// Switch icons according to state.
toggleIcons(schemeState)

function hasClass(el, className) {
  return el?.classList.contains(className) ?? false
}

function toggleColorScheme(isDark) {
  const isRootDark = hasClass(rootEl, classDark)

  // Temporarily removing transitions from all elements so toggling between themes feels snappy.
  const css = document.createElement('style')

  css.appendChild(noTransitionsNode)
  document.head.appendChild(css)

  if (isDark) {
    !isRootDark && rootEl.classList.add(classDark)
    toggleIcons(true)
  } else {
    isRootDark && rootEl.classList.remove(classDark)
    toggleIcons(false)
  }

  // Force a repaint and remove the stylesheet.
  const _ = window.getComputedStyle(css).transition
  document.head.removeChild(css)

  metaThemeEl?.setAttribute('content', isDark ? themeDark : themeLight)
  localStorage.setItem(localStorageKey, isDark ? classDark : classLight)
}

function toggleIcons(isDark) {
  const isLightHidden = hasClass(lightIconEl, classHidden)
  const isDarkHidden = hasClass(darkIconEl, classHidden)

  if (isDark) {
    !isLightHidden && lightIconEl?.classList.add(classHidden)
    isDarkHidden && darkIconEl?.classList.remove(classHidden)
  } else {
    isLightHidden && lightIconEl?.classList.remove(classHidden)
    !isDarkHidden && darkIconEl?.classList.add(classHidden)
  }
}

// Button click.
buttonEl?.addEventListener('click', () => {
  schemeState = !schemeState
  toggleColorScheme(schemeState)
})

// Track changes in media.
window
  .matchMedia('(prefers-color-scheme: dark)')
  .addEventListener('change', (event) => toggleColorScheme(event.matches))
</script>
