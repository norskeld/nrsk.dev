---
import { tw } from '@nrsk/tw'

import type { ArticleEntry } from '@/api/content'
import { toTagsWithURL } from '@/api/frontmatter'
import { readingTime } from '@/api/utils'
import { render } from '@/api/markdown'

import ScrollTop from '@/components/ScrollTop.astro'
import PageProse from '@/components/PageProse.astro'
import Header from '@/components/Header.astro'
import Tags from '@/components/Tags.astro'
import Date from '@/components/Date.astro'
import Dot from '@/components/Dot.astro'

export interface Props {
  item: ArticleEntry
}

const { body, data } = Astro.props.item

const content = await render(body)
const tags = toTagsWithURL('/blog/tags/', data.tags ?? [])

const articleClasses = tw`
  flex flex-col justify-center items-start gap-10 sm:gap-12
  w-full
`

const headingClasses = tw`
  text-3xl md:text-5xl font-bold tracking-tight
  text-black dark:text-white
`

const metaClasses = tw`
  text-gray-700 dark:text-gray-300
`

const metaEssentialClasses = tw`
  block sm:inline mb-2 sm:mb-0
`

const metaTagsClasses = tw`
  block sm:inline
`

const metaInlineableClasses = tw`
  hidden sm:inline
`

const footerClasses = tw`
  flex justify-center w-full
`
---

<article class={articleClasses}>
  <Header>
    <h1 slot="heading" class={headingClasses}>
      {data.title}
    </h1>

    <p slot="sub" class={metaClasses}>
      <span class={metaEssentialClasses}>
        <Date date={data.createdAt} />
        <Dot />
        <span>{readingTime(body)}</span>
      </span>

      <span class={metaTagsClasses}>
        <Dot class={metaInlineableClasses} />
        <Tags items={tags} />
      </span>
    </p>
  </Header>

  <PageProse content={content} />

  <footer class={footerClasses}>
    <ScrollTop>Scroll to top &uarr;</ScrollTop>
  </footer>
</article>
